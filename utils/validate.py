"""
    Indices of state (each starting with 9*(n-1)):

                      |  2  5  8 |
                      |  1  4  7 |
                      |  0  3  6 |
             --------------------------------------------
             20 23 26 | 47 50 53 | 29 32 35 | 38 41 44
             19 22 25 | 46 49 52 | 28 31 34 | 37 40 43
             18 21 24 | 45 48 51 | 27 30 33 | 36 39 42
             --------------------------------------------           
                      | 11 14 17 |
                      | 10 13 16 |
                      | 9  12 15 |
"""

edge_cubies = {
    0 : [7, 32],
    1 : [3, 50],
    2 : [1, 23],
    3 : [5, 41],
    4 : [16, 30],
    5 : [14, 48],
    6 : [10, 21],
    7 : [12, 39],
    8 : [52, 28],
    9 : [46, 25],
    10 : [43, 19] ,
    11 : [37, 34],    
}

corner_cubies = {
    0 : [6, 53, 29],
    1 : [0, 26, 47],
    2 : [2, 44, 20],
    3 : [8, 35, 38],
    4:  [17, 27, 51],
    5:  [11, 45, 24],
    6:  [9, 18, 42],
    7: [15, 36, 33],
}


edge_slots = [set(["U", "R"]), set(["U", "F"]), set(["U", "L"]), set(["U", "B"]), set(["D", "R"]), set(["D", "F"]), set(["D", "L"]), set(["D", "B"]), set(["F", "R"]), set(["F", "L"]), set(["B", "L"]), set(["B", "R"])]
corner_slots = [set(["U", "R", "F"]), set(["U", "F", "L"]), set(["U", "L", "B"]), set(["U", "B", "R"]), set(["D", "R", "F"]), set(["D", "F", "L"]), set(["D", "L", "B"]), set(["D", "B", "R"])]


def parity(permutation):
    permutation = list(permutation)
    length = len(permutation)
    elements_seen = [False] * length
    cycles = 0
    for index, already_seen in enumerate(elements_seen):
        if already_seen:
            continue
        cycles += 1
        current = index
        while not elements_seen[current]:
            elements_seen[current] = True
            current = permutation[current]
    return (length-cycles) % 2 == 0

def validate(scramble_str):
    scramble_list = list(scramble_str)
    edge_perm = []
    corner_perm = []
    
    edge_ori = 0
    corner_ori = 0
    
    
    for i in edge_cubies:
        temp_set = set()
        index_list = []
        for j in edge_cubies[i]:
            temp_set.add(scramble_list[j])
            index_list.append(scramble_list[j])
        
        if temp_set in edge_slots:   
            index = edge_slots.index(temp_set)
            edge_perm.append(index)
        else:
            return {"success": False, "error": "Invalid edge, check the scramble string"}
        
        if "U" in index_list:
            edge_ori += index_list.index("U")
            
        elif "D" in index_list:
            edge_ori += index_list.index("D")
            
        elif "F" in index_list:
            edge_ori += index_list.index("F")
            
        elif "B" in index_list:
            edge_ori += index_list.index("B")
            
        else:
            return {"success": False, "error": "Invalid edge, check the scramble string"}

    for i in corner_cubies:
        temp_set = set()
        index_list = []
        for j in corner_cubies[i]:
            temp_set.add(scramble_list[j])
            index_list.append(scramble_list[j])
        
        if temp_set in corner_slots:   
            index = corner_slots.index(temp_set)
            corner_perm.append(index)
            
        else:
            return {"success": False, "error": "Invalid corner, check the scramble string"}
        
        if "U" in index_list:
            corner_ori += (3 - index_list.index("U")) % 3
            
        elif "D" in index_list:
            corner_ori += (3 - index_list.index("D")) % 3
            
        else:
            return {"success": False, "error": "Invalid corner, check the scramble string"}

    if parity(edge_perm) != parity(corner_perm) or edge_ori % 2 != 0 or corner_ori % 3 != 0:
        return {"success": False, "error": "Invalid parity or orientation"}
        
    return {"success": True, "error": None}
        
if __name__ == "__main__":
    test_str_list = [
    "LDUFURLRDFLFUDBBLLRBBULRRDDUFUDRBDFLRUBBBUULRDFFDFLBRF",
    "DFUUUFRBBRBURDRULFFRFDLDLUFRRBURLBLDRDLDBLDBLBBLUFFUFD",
    "UBUUUFBDDRULLDFUUDDBRLLDBDLFRLRRRBBRRRFDBLBLFUFFUFBLFD",
    "UBLUURUURULRRDFLUURLFULDBLLFFLFRRDLFBFDDBBBBDDDFRFBRDB",
    "UULDUFDLDFFLDDUDRLRLULLRFURUBBBRBRDRBRFBBRUDFDFBLFFBUL",
    "BLFUULDRLFRBFDBRLBDLUBLBLRRLFLFRDUBFBUUDBDRURDUDDFFURF",
    "RUUDURLBBBDLFDDFURRLRFLBDRBFDFLRLLFLURUUBBDFFBUULFBDRD",
    "BULFUULRBDDDDDRBRFRRBLLLLUURBUDRFDLDRBLFBBFUUFFRBFLUDF",
    "DFLDULDLRURFUDBRUBLBDDLRULRLLLFRDBDBDBURBBFRBRUFUFFUFF",
    "RRUDULBRDRFFDDUDDDURBLLBLDFLLURRURFFBULBBBFFRUFDBFLBUL",
    "FDBBUDULUBRULDURFBRRUULBFFLDBBDRUDFFFRRDBRDBLLLDFFULLR",
    "BFRFUFDRFRBDDDRDBUBLFDLDFRRBULURUBLULULLBLUBURDDBFRLFF",
    "DBUFURBDLUDBDDFLFFFBLRLLRURLFDDRLUBBFUDBBURRBULFLFUDRR",
    "UBDBUULRLLFLDDRDFUUFRRLRDLFRFULRUFUDRLFLBBBUBBBRDFDBDF",
    "LRBBUBRLLFURRDLDRFLRLFLBUFFRDDURBRDUBLBDBDDFDBLUUFUUFF",
    "UFLLULLLBBULDDURBURDFRLLUBFRFBRRBDDDFBLFBDDRDFURFFUBRU",
    "RDDFUUDDLLLDLDBRUDFURFLBBRBRRLLRLFFUUDBBBFURBLDUUFRFBF",
    "DRUDUBFDUBUFDDUDBLRFFBLFRUFUUURRRBBRLLBFBDDLLDFLRFLBLR",
    "BBLFUDDBRDFLUDRBULBBUULDFFUBLFLRLUBULUFRBRRRFDDRFFLDDR",
    "FBBLUFFRRUURDDLFLDFRUFLRULDLBDFRULDDURBBBDRFLBBRUFDBUL",
    "DBDBUUULBLUDDDLRFFURFLLRLDBRFFLRBURDBDLFBRBFRFBRDFUUUL",
    "FFLBUUBRUUFRBDFDBFLBDLLUURRDRDURDLLBFDLDBLFLBBFUDFRRUR",
    "UBUUUUDLFFLUDDRBUFUUBBLDRRBLLBBRFDBDRRRFBFLLRFFLDFRDDL",
    "UBLDUBDDUFLBBDLDULRUDFLURFBDDFLRBRFLBRFLBRURBUULDFRFFR",
    "FLDRUDFLFBDLBDUUDDDFLRLFBBUBURLRUBRRRFULBFLUFUDLRFBRBD",
    "BUFBUFFDLRLLUDLRDRUFLDLRBBDBURFRBBRDDDFBBUFRUULLFFRULD",
    "RRBFULRLDDUFBDFLLLRUULLDLUBBBFBRDFDBDBRRBFFFLURURFDDUU",
    "BLDDULUFLBUFUDFBRFRUFRLFUDDUUBDRDUBDLRFBBBDFRRLLRFBLLR",
    "FRRUULURBBLUUDDDFLULFBLDLRDDDFRRBBDRLBDFBFRUUBURLFBFFL",
    "LUDDUBDRRBRUFDDURFLFRDLBFUBDRLBRFBFURLFUBLUDBLLDBFLRUF",
    "DUFDUDBBFBDFFDBDFLUFLLLBRUFBUULRLRRRBUURBRRDUDLLRFBDFL",
    "UBDDUFRBBFFBLDBBRDULLULULUFRDBFRLRDLUBUFBDLUFDRRRFRFLD",
    "LUFLUURLFRRFBDFBRRFDUFLFDFUBRBDRBLRUDULDBBDLRLDBLFUUBD",
    "FRULUBFBBLRLFDURBFUBBDLUDULUFUURDDFRFLDDBLBRRBLDFFDLRR",
    "DLRBUDDUDUULDDBLRBRLFLLDUBRRFLURFBDLUFBRBBBFUFUFRFLDRF",
    "LUDLUBUDLRRLDDUBFLUUFDLBFFUFFBRRBDLBRBDFBRFLRDLBRFDUUR",
    "DRRUURFBLRRRLDFLLFUBBBLFUUFUURBRDBFBUDDDBDFUDBRLLFFLLD",
    "UBDRUFRUUDRLFDLFLDLBLFLRUBBBDDBRRUURRLBDBUBDFFULFFDRLF",
    "LFRDUBDBDBRUBDRLRRDUBULUBFFULLFRDBBRUUFRBLLLDRDUDFLFFF",
    "RRBFULFBLDLDRDURDDFDLDLBRBBRBLRRDFLUUUBFBFLFDBUURFUFLU",
    "LUUFUULBRDLRBDRFUFRFRDLRUBBLUBLRDLFDURBLBFFLFBRDDFDDBU",
    "BLLRUBBLFUFLUDUBBFLBFDLDBLDRFRLRFDUDRFRRBRFDDUULBFDURU",
    "RBLUULUBDRFRRDRUBBUFFLLRBLFURFURDLBLBLBUBDFDDDUDDFFRFL",
    "RFULUUFDBRUDUDFBDUFDLRLULBBLFULRRLDRDFDBBLDBBFRULFBFRR",
    "RFDLUUDLRRFDDDRURLBUBULRFDUFDLDRFLLDBBBBBRUBLRFFBFUULF",
    "LDLRUDFULDUURDDFRLBRUBLBBLBULRBRFUFDRLFFBLRUFRBDFFDBUD",
    "RLDRUUUBLBLFUDDUBLRBLDLUURFBFBRRDFFULLBBBRDLFRFDFFDDUR",
    "URRUUDLBUFRDDDRFLDDFUFLDRUFFFDURLLBBUULBBLRLBBFRBFRLDB",
    "DDBUUBBUBUFFUDBURDFLRLLLDRBRRUDRRFFDLDLBBLRUULFRDFFFBL",
    "BRBLUDUUDUDBDDFDLLLBULLDDUUDRRURRFRLRBBBBFFLLRBRUFFFFF",
    "LRLUUUFDRDBDLDBFFUBDBLLFLLBRRRDRLLUUUFFUBRRRUFFDDFBBBD",
    "UBFDUFRDUDUFFDLBBLBRDRLRLLFBBDURFUBRLLBUBLRFLUURDFRDDF",
    "RRBFUUBLURFRDDURRDFFLDLBBLBFDUFRUFBLULFRBBDLDDDURFULBL",
    "RFRDURRFBLULLDRDULDBUBLDDLUFUDLRURBLBRUFBFFLBBDFDFBURF",
    "UFRDUDBBRRLLBDLFUFURUBLUBLLDDLRRUDDDLBBRBRFFBUFFUFLRFD",
    "LRBRULUBRUDFDDRFUDRULFLBRRUFUFBRLULDRFBBBDBFDDDBUFFLLL",
    "FBBLUUUDLFRURDURBRLULFLLLDDBFRURBBRFDBUDBRDLDBLRFFFUDF",
    "ULDRUUDRRBFFBDBBRURDBDLBRLRLLLDRUUUULBFRBFDLLDFBDFFFUF",
    "DDLBULBBURLLFDURBBURBDLFDUFURDRRDDRLFFFLBUFUUBFLBFLRDR",
    "ULRFUBBLDBFUFDRFBBLLDULFFURRBLURUUBFRRLRBLUDFLRBDFDDDD",
    "FDBLUFURFRBBLDUBRDUFDULBUFDLLFBRDRFLUDDBBLFRRLURRFUBDL",
    "LFRFUBUDDRUFDDDDUUBRFLLLRLBBRFRRLRRFBBLBBUUFUDBDFFULDL",
    "LBLFUDRFFFRULDRRRBRUFBLLFUUDDBDRUUFDBDRUBBUBDLRBFFLLLD",
    "RBUDULBFRLRUBDLRUUDLBDLDFFUBULRRRDBDFRBUBBFURLLFDFFLFD",
    "LUULUFRLLUUDUDLFRBFFFBLFFRBRDUDRFDBULLBRBRRDLRBDUFDDBB",
    "LLRRUFRURLBLDDLDFUBBFLLUUBDBLBURBFDBRRUFBRDRUFDFDFULFD",
    "BLLDUDBFDFBLRDUFBFRRDLLFUDLDLRURUDUBLLRFBRUBBFFURFBRDU",
    "BBBUULUDBFFURDDFRBDDLDLLFLLURRFRBDURLBDBBURRDLFULFFRUF",
    "RFFLUBRLLLRFBDBBLBBRRFLULUBRUFBRDUDDLFFRBDDDDULUUFFDRU",
    "UFFBUFBDRDDFRDRUFDBLDLLDLLBRULURRRRBFUUBBLRBLUULFFDFBD",
    "DFBFUFDRLRRFLDBRDLBBUBLULRRDBRRRUFUBULDDBLUDLUFFLFDFUB",
    "BURRULLBFRFUBDUBLLFFFRLFBRDULFFRDDBURULRBDDDURDLLFUBBD",
    "RBLFUDULRULLLDFLRLRBUFLDDUFDFRDRUBBDUUBBBLBRFBRDRFUFDF",
    "BURFULBUFBDDUDLRBDDRURLFLBRRBUDRRFDUULLLBBLFBFUDFFDFRL",
    "ULFRULDBDFFBRDRRFBDLUULFULLRRBDRUUBFBDLBBDRBRLUFDFUDFL",
    "BFRUUFFDLRFFRDDLRDURUULDRULBLDURBDDFBRUBBLFFBDBULFLRBL",
    "LRLLUUDLUFDBFDRDFUUBDBLDDFURULURDFLFRFRDBLLUBRRBBFBBRF",
    "RRBUULRFRLDDFDRUULUFDBLFBRFDDULRDFDULLFLBBBURLBDUFBFRB",
    "BBRDUDFUFFUBLDRDLRRRULLDURDFULFRBRFLBRDBBLUDBLULBFFDFU",
    "DRLDUDRDLFFRRDURLLUUDULDBLRDUFFRBURUBFBBBLLLBDBFRFFFBU",
    "DDLUURUFLULDBDUBBFRBBBLLLULDDRURDDLFRFURBFBDUFRBFFLRRF",
    "DULBUDFLFDRBFDDFRDLBBFLRRFFBULBRFRDRDLUDBBBLUUULRFURLU",
    "BBLDURFFLFDFFDLURBLLDRLUURURURURLLFFBUUDBBDBBRFRDFBDLD",
    "RBLUUDUFRDBBLDUURUFDDDLRRLFFBFDRRLLDBFBUBLLFBUBDFFRRUL",
    "UBDUUDDDFBUFRDBDDBLFBFLURRLULLBRLRBRBLUDBFURLDUFRFLRFF",
    "DLUUUDFBRDRDLDDRUBFULFLFBRRRLLLRDFUBUBUDBRLRBLBFFFFDBU",
    "URRUULDRBDLDBDFULURBBDLDBRLRRLURURFLFDUDBFFLDLFFUFBBBF",
    "UUBRUUDFLFDRUDFUFRUBDLLRDDFBBLRRLLUBBFDBBLLRRFBRDFDULF",
    "BBFBUFDLDUFUFDRRRFRRDULDLLRULBBRDFFRUDFRBLBULBUDDFULBL",
    "UBBUULDURFLLLDDUDLDFRULRUDFDRBFRBLRDBDBBBFRUUFLRBFRFFL",
    "FDLRULRLRBLBFDULRBLBUBLBLFRUFBURUFUFDBDDBDURFDLUFFDRRD",
    "LUBUUUURBDRRBDDUDFFDLDLLDLFRBBBRBLFRBRDLBFLFDFFULFRUUR",
    "UURDUFLFFBLDRDRRFBDRBULBFLBULFDRUFBUULLBBRLUDRFLDFBRDD",
    "RRRBUBDRBFLDLDDUURRUUDLFBLDFFLBRUFLLLUUBBDUFBLFBRFRDDF",
    "RBRFURLRRFDUUDLFDBUDFLLDLLFRBDFRBDFBLRUFBULRUBUDBFLDUB",
    "DUBRUDULDBBURDLDBDLDRRLBRFLRLFDRULUBFFRUBFURUFLBDFFFBL",
    "LFUFURDBLFDBRDLFBDDLRBLDRLUFURRRULUBURDFBDRBFUDBFFULLB",
    "LLUBURRRUDBDDDUDFUBFRDLDFBDBLULRUBRLLBFRBFRDFRUFFFLLUB",
    "RBUFUUFRRLDDFDFULLURFBLULBDBDRFRBBDURLFRBLBULFLBDFUDRD"]
    
    for test_str in test_str_list:
        validate(test_str)